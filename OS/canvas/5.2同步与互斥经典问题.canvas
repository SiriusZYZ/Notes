{
	"nodes":[
		{"type":"group","id":"e7065c221bf3a5a3","x":200,"y":520,"width":2480,"height":1460,"label":"读写进程问题"},
		{"type":"group","id":"951bc2474b5de0d8","x":200,"y":2120,"width":2480,"height":1180,"label":"哲学家进餐问题"},
		{"type":"group","id":"d21009eabc24dc42","x":200,"y":-840,"width":1840,"height":350,"label":"生产者-消费者问题"},
		{"type":"group","id":"32b58a1fd29a2bb1","x":200,"y":-340,"width":1840,"height":350,"label":"多生产者-多消费者问题"},
		{"type":"group","id":"3fec94b16ada6d94","x":200,"y":160,"width":1840,"height":260,"label":"吸烟者问题"},
		{"type":"text","text":"## 生产者-消费者问题\n- 有一货架，存放一种货物，\n- 货物具有多个生产者和多个消费者\n- 货架非满时生产者进程能生产货物并放入货架\n- 货架非空时消费者进程能从货架取走消费货物","id":"c886098a4b1c8eec","x":220,"y":-775,"width":640,"height":220},
		{"type":"text","text":"缓冲区访问信号量: mutex(1)","id":"f55fc749275f3465","x":920,"y":-775,"width":280,"height":60},
		{"type":"text","text":"缓冲区剩余空位: empty(N)","id":"0fb3166bf164ba7f","x":920,"y":-695,"width":280,"height":60},
		{"type":"text","text":"缓冲区货物数量: data(0)","id":"685b0dca0faba420","x":920,"y":-615,"width":280,"height":60},
		{"type":"text","text":"### 生产者进程行为：\n只需关注是否有空位\n1. 生产货物，\n2. 预定空位P(empty) \n3. 预定缓冲区权限P(mutex)  \n4. 写入\n5. 释放缓冲区V(mutex) \n6. 增加货物资源V(data)","id":"456d3e976d5675aa","x":1240,"y":-820,"width":300,"height":310},
		{"type":"text","text":"### 消费者进程行为：\n只需关注是否有数据\n1. 预定数据P(data)\n2. 预定缓冲区权限P(mutex) \n3. 读取数据\n4. 释放缓冲区V(mutex) \n5. 增加空位资源V(data)\n6. 使用货物","id":"bf97627f89bfec30","x":1580,"y":-820,"width":300,"height":310},
		{"type":"text","text":"### 生产者进程行为：\n只需关注缓冲区是否有空位\n1. 生产货物i\n2. 预定空位P(empty) \n3. 预定缓冲区权限P(mutex)  \n4. 写入\n5. 释放缓冲区V(mutex) \n6. 增加i类货物资源V(type_i)","id":"7710bc9b1f48d9d4","x":1240,"y":-320,"width":300,"height":310},
		{"type":"text","text":"### i类消费者进程行为：\n只需关注是否有对应类型数据\n1. 预定i类数据P(type_i)\n2. 预定缓冲区权限P(mutex) \n3. 读取数据\n4. 释放缓冲区V(mutex) \n5. 增加空位资源V(data)\n6. 使用货物","id":"5517052cbdd9deba","x":1580,"y":-320,"width":300,"height":310},
		{"type":"text","text":"## 多生产者-多消费者问题\n- 有一货架，存放多种货物。\n- 不同货物都有多个生产者和多个消费者\n- 货架非满时生产者进程能生产货物并放入货架\n- 货架非空时消费者进程能从货架取走消费货物","id":"2ab8680c0cf0b6f1","x":220,"y":-295,"width":640,"height":200},
		{"type":"text","text":"## 吸烟者问题\n- 有一货架，存放多种货物。\n- 有一生产者进程能生产所有类型的货物\n- 有不同类型的消费者，需要不同类型的货物组合\n- 消费者需要轮流进行消费","id":"42bd14ba87e1d946","x":220,"y":180,"width":640,"height":213},
		{"type":"text","text":"缓冲区访问信号量: mutex(1)","id":"d86b62db4c341871","x":920,"y":-305,"width":280,"height":60},
		{"type":"text","text":"缓冲区剩余空位: empty(N)","id":"a58bd5329d2447c2","x":920,"y":-225,"width":280,"height":60},
		{"type":"text","text":"缓冲区i类货物数量: type_i(0)","id":"6f45e43f30065c3b","x":920,"y":-145,"width":280,"height":60},
		{"type":"text","text":"缓冲区访问信号量: mutex(1)","id":"a9880dcfabb46712","x":920,"y":180,"width":280,"height":60},
		{"type":"text","text":"缓冲区剩余空位: empty(1)","id":"7b520b8edb6c65d2","x":920,"y":260,"width":280,"height":60},
		{"type":"text","text":"缓冲区i类货物数量: type_i(0)","id":"287d12b0800ee6dd","x":920,"y":340,"width":280,"height":60},
		{"type":"text","text":"### 抽象原理\n- **将一类货物组合抽象为以一种资源**，并假设缓冲区大小为1。\n- 生产者循环生产各类资源\n- 消费者循环预定自己需要的资源","id":"510e575e8d1d09b4","x":1240,"y":195,"width":640,"height":190},
		{"type":"text","text":"## 读写进程问题\n- 有一个共享的文件\n- 多个读进程和多个写进程\n- 写入时，仅允许一个写进程访问\n- 读取时，允许多个读进程访问","id":"16f9bf83fed8d9e7","x":220,"y":600,"width":640,"height":212},
		{"type":"text","text":"### 读友好\n计数器为0时允许增加写进程。","id":"1adc775845fc52c0","x":1020,"y":741,"width":300,"height":142},
		{"type":"text","text":"- 访问资源的读进程数量计数器`count = 0`\n- 读计数器互斥访问信号量`count_write(1)`\n- 是否允许写信号量 `writable(1)`","id":"a321fdddce71cddf","x":1435,"y":570,"width":445,"height":136},
		{"type":"text","text":"- 访问资源的读进程数量计数器`count = 0`\n- 读计数器互斥访问信号量`count_write(1)`\n- 是否可写的信号量 `writable(1)`\n- 读进程加入器的信号量 `add_read(1)`","id":"7a0361a351444523","x":1435,"y":1200,"width":445,"height":160},
		{"type":"text","text":"### 读进程\n  1. `count_write.P()`：申请访问计数器，以增加读进程计数\n     `if(count == 0): writeable.P()`：当自己是首个读进程时上锁，即文档为读状态\n  2. `count ++` 令读进程计数+1\n  3. `count_write.V()` 释放计数器访问权限\n  4. 读文件\n  5. `count_write.P()`：申请对计数器进行访问，以减少读进程计数\n  6. `count --`：表示自己已经读完\n     `if(count == 0): writable.V()`：当自己是最后一个读进程时，允许文档背写了\n  7. `count_write.V()` ：释放计数器访问权限","id":"df8ed063bb4122b6","x":1435,"y":738,"width":579,"height":432},
		{"type":"text","text":"### 写进程\n  1. `writable.P()` 预定写权限\n  2. 写入\n  3. `writable.V()` 释放文件","id":"8918b09eb9499c83","x":2040,"y":738,"width":420,"height":432},
		{"type":"text","text":"### 读进程\n  1. `add_read.P()`: 申请增加读进程\n  2. `count_write.P()`：申请访问计数器，以增加读进程计数\n     `if(count == 0): writeable.P()`：当自己是首个读进程时上锁，即文档为读状态\n  2. `count ++` 令读进程计数+1\n  3. `count_write.V()` 释放计数器访问权限\n  4. `add_read().V()` 释放读进程加入器\n  5. 读文件\n  6. `count_write.P()`：申请对计数器进行访问，以减少读进程计数\n  7. `count --`：表示自己已经读完\n     `if(count == 0): writable.V()`：当自己是最后一个读进程时，允许文档背写了\n  7. `count_write.V()` ：释放计数器访问权限","id":"08ce81354c0d38e3","x":1435,"y":1380,"width":579,"height":580},
		{"type":"text","text":"### 写进程\n  1. `add_read().P()` 禁止新的读进程加入\n  2. `writable.P()` 预定写权限\n  3. 写入\n  4. `writable.V()` 释放文件\n  5. `add_read.V()` 允许新的读进程加入","id":"fa1e9edb1a85378d","x":2120,"y":1380,"width":420,"height":580},
		{"type":"text","text":"# 进程同步与互斥经典问题","id":"4dbf8ee4a5d4191f","x":-560,"y":912,"width":465,"height":84},
		{"type":"text","text":"## 逻辑：\n- 任何进程都只需要关注是否有其他进程在写入，没有就可以尝试访问\n- 读进程工作时，写进程不能访问\n- 增加一个读进程计数器，当计算器为0时允许写\n- 增加一个可写互斥量","id":"0b1e7ae96e0da57e","x":220,"y":996,"width":640,"height":212},
		{"type":"text","text":"## 一次只允许一人进餐\n简单粗暴解决问题","id":"d5dc8c8e896d0fc4","x":960,"y":2231,"width":379,"height":92},
		{"type":"text","text":"### 写友好\n增加读进程加入器。写进程第一步先锁上加入器。","id":"bb050c667e642fd0","x":1020,"y":1380,"width":300,"height":160},
		{"type":"text","text":"- 互斥信号量 `dinner(1)`","id":"f2797f245f5777c0","x":1435,"y":2140,"width":345,"height":60},
		{"type":"text","text":"- 吃饭人数信号量`dinner(N-1)`\n- 筷子互斥信号量 `chopstick[N](1)`\n","id":"a77dbe8ea47327db","x":1435,"y":2442,"width":485,"height":86},
		{"type":"text","text":"### 哲学家进程\n1. `dinner.P()` 预定进餐名额\n2. 进餐\n3. `dinner.V()` 吃完了","id":"4a1d6be0069b854b","x":1435,"y":2231,"width":345,"height":184},
		{"type":"text","text":"### 哲学家进程\n- 进餐方式\n  1. `dinner.P()` 要求进餐\n  2. `chopstick[i].P()` 要求左边的筷子\n  3. `chopstick[(i+1)%5].P()` 要求右边的筷子\n  4. 进餐\n  5. `chopstick[(i+1)%5].V()` 释放右边的筷子\n  6. `chopstick[i].V()` 释放左边的筷子\n  7. `dinner.V()` 吃完了","id":"85c649857737d62a","x":1435,"y":2570,"width":485,"height":343},
		{"type":"text","text":"## 一次只允许N-1人进餐\n一次只给N-1个人吃饭，且每个人都只能先拿起左边的筷子，那必然有人能吃完饭。","id":"6d1f269080b601f5","x":960,"y":2500,"width":379,"height":164},
		{"type":"text","text":"## 奇数先拿左，偶数先拿右\n可以保证相邻人\n- 要么第一次拿时尝试拿起同一根筷子\n- 要么第二次拿时尝试拿起同一根筷子\n以上要么杜绝了任何人占有筷子时又循环等待的问题","id":"cfa175d69f4c2ddc","x":960,"y":2940,"width":475,"height":300},
		{"type":"text","text":"## 哲学家进餐问题\n- 有一些不同类型`N`资源， 有`N`个哲学家\n- 每个哲学家需要有且仅有两个互斥资源\n- 每个资源会被有且仅有两个哲学家需要\n![[Pasted image 20230608195755.png]]","id":"0a49cf09b1719076","x":220,"y":2311,"width":640,"height":542}
	],
	"edges":[
		{"id":"78a9a6fcc5522415","fromNode":"c886098a4b1c8eec","fromSide":"bottom","toNode":"2ab8680c0cf0b6f1","toSide":"top","label":"资源种类数量增加"},
		{"id":"1c99b7345d057abb","fromNode":"456d3e976d5675aa","fromSide":"bottom","toNode":"7710bc9b1f48d9d4","toSide":"top","label":"关注点相同"},
		{"id":"b3cec1c1286acfaa","fromNode":"bf97627f89bfec30","fromSide":"bottom","toNode":"5517052cbdd9deba","toSide":"top","label":"关注点相同"},
		{"id":"74a5ab6fad48742d","fromNode":"2ab8680c0cf0b6f1","fromSide":"bottom","toNode":"42bd14ba87e1d946","toSide":"top","label":"变体"},
		{"id":"c8f6d37a5c14bfdc","fromNode":"7710bc9b1f48d9d4","fromSide":"bottom","toNode":"510e575e8d1d09b4","toSide":"top"},
		{"id":"7ca0340efd6ec60a","fromNode":"5517052cbdd9deba","fromSide":"bottom","toNode":"510e575e8d1d09b4","toSide":"top"},
		{"id":"3a70411596af94dd","fromNode":"4dbf8ee4a5d4191f","fromSide":"right","toNode":"d21009eabc24dc42","toSide":"left"},
		{"id":"133a176d768c2ade","fromNode":"4dbf8ee4a5d4191f","fromSide":"right","toNode":"32b58a1fd29a2bb1","toSide":"left"},
		{"id":"7c5050071999d9bc","fromNode":"4dbf8ee4a5d4191f","fromSide":"right","toNode":"3fec94b16ada6d94","toSide":"left"},
		{"id":"f770eb040f61ea95","fromNode":"4dbf8ee4a5d4191f","fromSide":"right","toNode":"e7065c221bf3a5a3","toSide":"left"},
		{"id":"f1bbccdc293745b0","fromNode":"0b1e7ae96e0da57e","fromSide":"right","toNode":"1adc775845fc52c0","toSide":"left"},
		{"id":"6e5f317d1e4cac3f","fromNode":"0b1e7ae96e0da57e","fromSide":"right","toNode":"bb050c667e642fd0","toSide":"left"},
		{"id":"d2ffcf6087fd1cf7","fromNode":"1adc775845fc52c0","fromSide":"right","toNode":"a321fdddce71cddf","toSide":"left","label":"信号量"},
		{"id":"d833da8f5b2c1148","fromNode":"1adc775845fc52c0","fromSide":"right","toNode":"df8ed063bb4122b6","toSide":"left","label":"行为"},
		{"id":"e3a1fddba2a85959","fromNode":"df8ed063bb4122b6","fromSide":"right","toNode":"8918b09eb9499c83","toSide":"left"},
		{"id":"1739483b3c87178d","fromNode":"bb050c667e642fd0","fromSide":"right","toNode":"7a0361a351444523","toSide":"left","label":"信号量"},
		{"id":"f0887e7e2d99315a","fromNode":"08ce81354c0d38e3","fromSide":"right","toNode":"fa1e9edb1a85378d","toSide":"left"},
		{"id":"3c955e6416f70875","fromNode":"bb050c667e642fd0","fromSide":"right","toNode":"08ce81354c0d38e3","toSide":"left","label":"行为"},
		{"id":"6c1ababa1fe103c9","fromNode":"4dbf8ee4a5d4191f","fromSide":"right","toNode":"951bc2474b5de0d8","toSide":"left"},
		{"id":"bf194b4ce61eb9b5","fromNode":"16f9bf83fed8d9e7","fromSide":"bottom","toNode":"0b1e7ae96e0da57e","toSide":"top"},
		{"id":"9ca610b438cd01f6","fromNode":"0a49cf09b1719076","fromSide":"right","toNode":"d5dc8c8e896d0fc4","toSide":"left"},
		{"id":"7b51412345bbec8c","fromNode":"d5dc8c8e896d0fc4","fromSide":"right","toNode":"f2797f245f5777c0","toSide":"left","label":"信号量"},
		{"id":"07d2caf7447f9036","fromNode":"d5dc8c8e896d0fc4","fromSide":"right","toNode":"4a1d6be0069b854b","toSide":"left"},
		{"id":"f6400b77a5297c24","fromNode":"0a49cf09b1719076","fromSide":"right","toNode":"6d1f269080b601f5","toSide":"left"},
		{"id":"31a0316f0a92cc43","fromNode":"6d1f269080b601f5","fromSide":"right","toNode":"a77dbe8ea47327db","toSide":"left","label":"信号量"},
		{"id":"2a2008c0f4d41dec","fromNode":"6d1f269080b601f5","fromSide":"right","toNode":"85c649857737d62a","toSide":"left","label":"行为"},
		{"id":"39619ec81d557042","fromNode":"0a49cf09b1719076","fromSide":"right","toNode":"cfa175d69f4c2ddc","toSide":"left"}
	]
}