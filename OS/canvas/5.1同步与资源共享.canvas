{
	"nodes":[
		{"type":"group","id":"f8066799b796809a","x":-2119,"y":-1440,"width":1800,"height":1120,"label":"死锁"},
		{"type":"group","id":"39a4223eb055b8d5","x":-2080,"y":120,"width":1722,"height":676,"label":"锁"},
		{"type":"group","id":"48b3c924439dee65","x":-1250,"y":-1380,"width":331,"height":780,"label":"预防"},
		{"type":"group","id":"3bdcce4f3edc3d92","x":600,"y":-1100,"width":680,"height":220,"label":"互斥访问原则"},
		{"type":"text","text":"### 进入区 / Entry Sec. \n检查资源占用状态，可用时设置访问标志占用资源","id":"2ced2c739d1ef80e","x":1141,"y":-820,"width":600,"height":94},
		{"type":"text","text":"**有限等待**","id":"636ed41aa5329284","x":1110,"y":-1080,"width":140,"height":60},
		{"type":"text","text":"**空闲让进**","id":"b528f58ba0b0c8e0","x":620,"y":-1080,"width":150,"height":60},
		{"type":"text","text":"**忙则等待**","id":"5ffce3ac39f9896b","x":790,"y":-1080,"width":140,"height":60},
		{"type":"text","text":"**让权等待**","id":"9c946a2db0d04f7c","x":950,"y":-1080,"width":140,"height":60},
		{"type":"text","text":"**==让权==**：不能访问资源时应释放处理机，而非循环检查(忙等)","id":"39ed4a68e1cd6e36","x":620,"y":-960,"width":630,"height":60},
		{"type":"text","text":"## 单标志法\n- **思想** - **禅让**：前序进程访问完临界区后，会把临界资源访问权限赋予到需要访问的下一个进程。**换而言之，每个进程进入临界区的权限只能被另一个进程赋予。** \n- **标志：** 单个全局变量`turn`，**保存可以访问临界资源的PID**\n1. **判断：** 循环检查，当前标志与自身PID一致则可以访问\n2. **上锁：** **不需要上锁，即不用在进入区修改`turn`**\n3. **释放：** 在退出区修改标志为另一个进程的PID\n","id":"4d71d513b980ec5c","x":2320,"y":-1450,"width":580,"height":310},
		{"type":"text","text":"## 先检查后主张法\n- **思想：** 当自己需要临界资源而其他进程不主张该资源时，则进入临界区\n- **标志：** 全局布尔型数组`Flag`，**保存各进程对临界资源的主张**\n1. **判断：** 循环检查，其他进程不主张占用临界资源(标志数组`Flag`全为`False`)\n2. **上锁：** 设置标志数组`Flag`中自身主张为`True`\n3. **释放：** 设置标志数组`Flag`中自身主张为`False`\n","id":"55c747ab66857af3","x":2320,"y":-1110,"width":580,"height":320},
		{"type":"text","text":"## 问题\n- **违反让权等待**：循环检查过程，导致忙等\n- **违反空闲让进**：当`turn` 指向了一个不需要访问临界资源的进程，该进程不进入临界区，也不会在退出区修改`turn`，使得资源死锁\n- 禅让时，如果已经有皇帝，想做皇帝的人得一直等待。\n- 禅让时，如果皇位给了一个根本不管事的人，他又不干活又不禅让，皇位就死锁。","id":"4e4e479cb8836ca4","x":2960,"y":-1450,"width":540,"height":310},
		{"type":"text","text":"## 问题\n- **违反让权等待**：循环检查过程，导致忙等\n- **违反忙则等待**：当在判断和上锁之间发生了进程调度，就有可能发生两个进程同时认为临界资源无人主张，导致互斥失败。\n- **问题在于判断-上锁 软件实现不具备原子性**\n- 之所以只适用于两个进程，主要是因为无法原子性地检查全部进程的主张","id":"581185ab79d148c3","x":2960,"y":-1105,"width":540,"height":310},
		{"type":"text","text":"## 先主张后检查法\n- **思想：** 先主张占有资源，再检查其他资源是否主张。不主张则进入临界区。\n- **标志：** 全局布尔型数组`Flag`，**保存各进程对临界资源的主张**\n1. **上锁：** 设置标志数组`Flag`中自身主张为`True`\n2. **判断：** 循环检查，其他进程不主张占用临界资源(标志数组`Flag`全为`False`\n3. **释放：** 设置标志数组`Flag`中自身主张为`False`\n\n","id":"5ace460c05d96346","x":2320,"y":-751,"width":580,"height":320},
		{"type":"text","text":"## Peterson算法\n- **思想 - 谦让**：先主张，并礼让他人让他人先用，如果没人想用或大家谦让一轮以后还是让你先用那你就用\n- **标志：**\n  1. 全局变量`turn`，表示优先使用的进程PID\n  2. 全局标志数组`Flag`，表示各进程对临界区资源的主张\n1. **上锁：** 设置标志数组`Flag`中自身主张为`True`\n2. **谦让：** 设置全局变量`turn`为其他进程的PID\n3. **判断：** 当其他进程不主张资源**或**优先使用临界区资源的PID是自己时，进入临界区\n4. **释放：** 设置标志数组`Flag`中自身主张为`False`","id":"f039be327198abb2","x":2320,"y":-390,"width":580,"height":420},
		{"type":"text","text":"## 问题\n- **违反让权等待**：循环检查过程，导致忙等\n- **违反空闲让进**：当在上锁和判断之间发生了进程调度，就有可能发生两个进程同时认为临界资源有人主张，导致资源死锁。\n- **问题在于上锁-判断 软件实现不具备原子性**\n- 之所以只适用于两个进程，主要是因为无法原子性地检查全部进程的主张","id":"0838fd5168cf5abe","x":2960,"y":-746,"width":540,"height":310},
		{"type":"text","text":"## 问题\n- **违反让权等待**：循环检查过程，导致忙等\n- **解决了忙则等待和空闲让进**，因为每一个进程都先谦让再判断，同时进入临界区的条件有两个：无人主张或自己是最优先执行的\n- 未经改造的Peterson算法**只适用于双进程情况**：\n  - 假设3个进程，谦让一轮以后优先进程退出临界区。此时PID不为优先进程，`turn` 中True数量又为2，使得剩下的两个进程都无法进入临界区\n\n\n","id":"520f9e18be25607a","x":2960,"y":-390,"width":540,"height":420},
		{"type":"text","text":"### 退出区 / Exit Sec.\n完成访问，解除资源占用","id":"6f4dbed2c3ec3755","x":1140,"y":-591,"width":601,"height":110},
		{"type":"text","text":"- **剩余区 / Remainder Sec.**：与临界资源的访问无关的代码段","id":"9dd8db312ec0f3c9","x":1140,"y":-461,"width":600,"height":60},
		{"type":"text","text":"- **临界区 / Critical Sec.**：真正访问资源的代码","id":"335423402121439f","x":1141,"y":-686,"width":600,"height":60},
		{"type":"text","text":"### 中断屏蔽\n- **原理**：访问临界区前直接关掉CPU中断，退出时再开启\n- 不适用于多处理器，也不适用于用户态进程","id":"3388836e350bdcf3","x":1140,"y":-320,"width":600,"height":140},
		{"type":"text","text":"### TestAndSet / TS / TSL\n- 原子性地上锁+判断\n- TSL 原子地执行两件事：\n  1. 上锁`lock = True`\n  2. 返回上锁前锁的状态`return lock_old`\n- 进程的进入区：对`lock`**循环调用**TSL指令，当返回值为False时进入临界区(即在当前进程的上个进程释放了资源)\n- 进程的退出区：设置`lock = False`\n- 适用多处理机，但不满足让权等待","id":"652b2f8794fcb70b","x":1140,"y":-140,"width":600,"height":340},
		{"type":"text","text":"### Swap / Exchange / XCHG\n- 原子性地先上锁再判断\n- swap可以原子性地交换两个指针的值，把`lock` 和 `old` 的值进行交换\n- 进程的进入区：先设置`old = True`，`while(old)` 循环交换`old`和`lock`\n- 进程的退出区：设置`lock = False`\n- 实际上，swap和TSL是基本等价的","id":"2328516de5777799","x":1140,"y":240,"width":600,"height":300},
		{"type":"text","text":"## 组成","id":"06ef056a4d84aa87","x":380,"y":918,"width":250,"height":50},
		{"type":"text","text":"# 信号量机制","id":"c4be91260233b070","x":-20,"y":1020,"width":277,"height":86},
		{"type":"text","text":"## 实现互斥\n1. 设定互斥信号量初始值为1\n2. 进程在进入区执行P操作\n3. 进程在退出区执行V操作","id":"e9ea26acd6a1bf5c","x":420,"y":1138,"width":566,"height":180},
		{"type":"file","file":"OS/5.同步与资源共享.md","id":"895915c551265a0d","x":-580,"y":-120,"width":360,"height":60},
		{"type":"text","text":"## 实现同步\n1. 设置同步信号量初始值为0\n2. 先发进程在关键代码后对同步信号量执行V操作\n3. 后发进程在同步代码前对同步信号量执行P操作","id":"24d71a2bd3fc4328","x":420,"y":1390,"width":566,"height":188},
		{"type":"text","text":"## 进程互斥\n- **共享**： 多个进程用一个系统中的资源\n- **临界资源**：一个时间段内只允许一个进程访问的资源\n- **进程互斥**：多个进程不能同时使用一个临界资源","id":"ad5abfa6380f6961","x":-60,"y":-576,"width":480,"height":210},
		{"type":"text","text":"## 互斥访问的逻辑结构","id":"d5264b2d7659cc09","x":680,"y":-626,"width":340,"height":60},
		{"type":"text","text":"## 互斥访问的硬件实现","id":"80c4c9d25bce6efe","x":680,"y":-10,"width":340,"height":60},
		{"type":"text","text":"## 进程异步和同步\n- 异步性：并发进程前进速度不协调\n- **同步性**：协调相关进程之间的工作秩序\n","id":"4d79fcf7b78d5449","x":-60,"y":-274,"width":480,"height":140},
		{"type":"text","text":"### PV操作\n- P / wait() : 先令资源 - 1(相当于申请)，当资源数量小于0时(说明主张资源前已无资源可用)，进程进入阻塞队列\n- V / signal() : 释放资源，令资源+1。如果释放后资源数量小于0，说明至少一个资源在等待。但是因为有一个进程释放了，所以应该让队列中的一个进程出队并进入临界区","id":"c21d7d64d334a8ac","x":732,"y":823,"width":548,"height":240},
		{"type":"text","text":"### 成员\n- 可用资源数量\n- 阻塞队列","id":"ca04a94ce1f696a0","x":736,"y":638,"width":250,"height":140},
		{"type":"text","text":"==resources 大于等于0 时代表剩余资源数， 小于等于0时代表阻塞的队列数==\n对于申请进入临界区的进程，在尝试申请一个资源（`resources -= 1`）后\n- `resources` 为正：说明还有资源可用\n- `resources` 为零：说明自己刚好用完了资源\n- `resources` 为负：说明资源本身就已经用完，只能进入阻塞队列等待其他进程释放\n- 因此，申请后 `resources < 0 ` 时应阻塞\n\n对于在退出区的进程，在归还资源（`resources += 1`）后\n- `resources` 为正：说明归还资源之前仍然有余量，而且队列中没有进程在等待\n- `resources` 为零：说明目前恰好有一个进程在等待资源（归还前`resources = -1`）\n- `resources` 为负：说明目前有数个进程正在等待资源\n- 因此，归还后 `resources <= 0 `时应唤醒一个进程\n\n- 显然记录型信号量能实现让权等待","id":"9302438bb8ffd61a","x":1440,"y":708,"width":774,"height":470},
		{"type":"file","file":"OS/canvas/5.2同步与互斥经典问题.canvas","id":"398fc099a83de41e","x":-72,"y":1578,"width":381,"height":400},
		{"type":"text","text":"## 锁类型","id":"5b9f442b12040b89","x":-2060,"y":396,"width":392,"height":60},
		{"type":"text","text":"### 互斥锁 / Spin Lock\n- 锁的操作具有**原子性**\n- 当一个进程锁定了该互斥锁，其他进程无法对其锁定\n- **无法加锁的进程循环等待(自旋，忙等)**","id":"f688c49d0a2e6e19","x":-1396,"y":140,"width":410,"height":206},
		{"type":"text","text":"### 互斥锁 / Mutex Lock\n- 锁的操作具有**原子性**\n- 当一个进程锁定了该互斥锁，其他进程无法对其锁定\n- **无法加锁的进程自动阻塞**","id":"88fabfbce52dbfb0","x":-1396,"y":545,"width":410,"height":186},
		{"type":"text","text":"### 递归锁 / Recursive Lock\n- 锁的操作具有**原子性**\n- 同一个锁现在可以被一个进程多次加锁和解锁了\n- 只有当递归锁中的加锁次数和解锁次数相同时，其他进程才能对这个锁加锁\n- 可以用一个整数维护加锁次数-解锁次数","id":"8d2dec49a3322c3f","x":-828,"y":501,"width":450,"height":275},
		{"type":"text","text":"### 持有临界资源时仍请求新资源\n进程在持有一个互斥资源的条件下仍请求一个新的互斥资源","id":"62b34ded30ad3fc1","x":-1659,"y":-995,"width":380,"height":215},
		{"type":"text","text":"### 循环等待\n各进程存在循环等待资源的等待链","id":"1e23a2d2a5bb730a","x":-1659,"y":-760,"width":380,"height":140},
		{"type":"text","text":"进程的同步顺序不合法","id":"5d706d858ff407bc","x":-1659,"y":-422,"width":380,"height":60},
		{"type":"text","text":"### 静态请求\n**即一次请求所需的全部资源**。当无法满足时不投入运行，请求成功后就不再请求资源。可能降低并发度并造成饥饿。","id":"e2f744d41e0e6c1e","x":-1230,"y":-994,"width":291,"height":214},
		{"type":"text","text":"竞争不可剥夺的系统资源","id":"aa5f1a5dd5d244ff","x":-1659,"y":-532,"width":380,"height":60},
		{"type":"text","text":"### 顺序分配\n对资源进行编号，进程请求多个资源时必须要按编号顺序请求。","id":"d34049cf0c4efdd4","x":-1230,"y":-760,"width":291,"height":140},
		{"type":"text","text":"### 允许共享\n将互斥资源改为共享，如假脱机技术","id":"ca4f9a4110c5df8f","x":-1230,"y":-1360,"width":291,"height":120},
		{"type":"text","text":"### 允许剥夺\n当某个进程请求新的资源不能满足时，应立即释放全部持有的资源并等待","id":"db731dad4e574d88","x":-1230,"y":-1179,"width":291,"height":148},
		{"type":"text","text":"## 死锁条件\n要全部成立才**可能** 导致死锁","id":"78d2c82b1608bf14","x":-2099,"y":-1057,"width":300,"height":125},
		{"type":"text","text":"## 死锁时机","id":"3f1ecba1e83d2d82","x":-2099,"y":-472,"width":300,"height":60},
		{"type":"text","text":"### 资源互斥\n对互斥使用的临界资源才会导致死锁","id":"91483e6c73e0fb96","x":-1659,"y":-1360,"width":380,"height":120},
		{"type":"text","text":"### 无法剥夺\n进程获取互斥资源后只能主动释放，不能被其他进程强行夺走","id":"a97144c77c319cd4","x":-1659,"y":-1179,"width":380,"height":148},
		{"type":"text","text":"## 银行家算法\n- 问题定义：N个进程，需要多个不同类型不同数量的资源，需要找到一种分配顺序保证不产生死锁。\n- **逻辑**：**对任何进程的每一次申请都作一次判断，即应允该请求以后，是否会导致剩下的资源使得所有未完成的进程的最大资源请求都没办法满足。**","id":"50180542742aa17a","x":-820,"y":-1380,"width":475,"height":329},
		{"id":"8019efcace7c6ca3","x":-820,"y":-1020,"width":475,"height":407,"type":"text","text":"### 死锁的检测\n![[Pasted image 20230620201116.png]]\n**检测方法**：观察是否能消除所有的线：\n    - 依次消除与不阻塞进程相连的便，直到无边可消 "}
	],
	"edges":[
		{"id":"811e27de0ec1a8a8","fromNode":"895915c551265a0d","fromSide":"right","toNode":"4d79fcf7b78d5449","toSide":"left"},
		{"id":"daceac1d28c47ed1","fromNode":"895915c551265a0d","fromSide":"right","toNode":"ad5abfa6380f6961","toSide":"left"},
		{"id":"373a122210a9d26f","fromNode":"ad5abfa6380f6961","fromSide":"right","toNode":"d5264b2d7659cc09","toSide":"left","label":"软件实现"},
		{"id":"11741e2c8879e6f8","fromNode":"d5264b2d7659cc09","fromSide":"right","toNode":"2ced2c739d1ef80e","toSide":"left"},
		{"id":"319adf438f456987","fromNode":"d5264b2d7659cc09","fromSide":"right","toNode":"6f4dbed2c3ec3755","toSide":"left"},
		{"id":"d99eb5b11604f307","fromNode":"d5264b2d7659cc09","fromSide":"right","toNode":"335423402121439f","toSide":"left"},
		{"id":"8a5946486cde1669","fromNode":"d5264b2d7659cc09","fromSide":"right","toNode":"9dd8db312ec0f3c9","toSide":"left"},
		{"id":"e3318c67a895a777","fromNode":"ad5abfa6380f6961","fromSide":"right","toNode":"3bdcce4f3edc3d92","toSide":"left"},
		{"id":"4c1eed4fe1cbe540","fromNode":"9c946a2db0d04f7c","fromSide":"bottom","toNode":"39ed4a68e1cd6e36","toSide":"top"},
		{"id":"a11ec339d1e116a9","fromNode":"2ced2c739d1ef80e","fromSide":"right","toNode":"4d71d513b980ec5c","toSide":"left","label":"多个进程 / LockOne"},
		{"id":"8933c8f51ec1f2c9","fromNode":"2ced2c739d1ef80e","fromSide":"right","toNode":"f039be327198abb2","toSide":"left","label":"两个进程 / Peterson"},
		{"id":"356da004222d5514","fromNode":"2ced2c739d1ef80e","fromSide":"right","toNode":"55c747ab66857af3","toSide":"left","label":"两个进程 / LockTwo"},
		{"id":"425934b25618affa","fromNode":"4d71d513b980ec5c","fromSide":"right","toNode":"4e4e479cb8836ca4","toSide":"left"},
		{"id":"6f3b8090169bc684","fromNode":"55c747ab66857af3","fromSide":"right","toNode":"581185ab79d148c3","toSide":"left"},
		{"id":"02d47610f41e4514","fromNode":"5ace460c05d96346","fromSide":"right","toNode":"0838fd5168cf5abe","toSide":"left"},
		{"id":"2a8c3673ff814fa5","fromNode":"2ced2c739d1ef80e","fromSide":"right","toNode":"5ace460c05d96346","toSide":"left","label":"两个进程 / LockTwo"},
		{"id":"30f80575431879c3","fromNode":"f039be327198abb2","fromSide":"right","toNode":"520f9e18be25607a","toSide":"left"},
		{"id":"93841409395b4a08","fromNode":"ad5abfa6380f6961","fromSide":"right","toNode":"80c4c9d25bce6efe","toSide":"left","label":"硬件实现"},
		{"id":"0e2a897c67b7439f","fromNode":"80c4c9d25bce6efe","fromSide":"right","toNode":"3388836e350bdcf3","toSide":"left"},
		{"id":"6a5a917f1f768fba","fromNode":"80c4c9d25bce6efe","fromSide":"right","toNode":"652b2f8794fcb70b","toSide":"left"},
		{"id":"2d48de758fdea092","fromNode":"80c4c9d25bce6efe","fromSide":"right","toNode":"2328516de5777799","toSide":"left"},
		{"id":"e3687daa81999a3f","fromNode":"f688c49d0a2e6e19","fromSide":"bottom","toNode":"88fabfbce52dbfb0","toSide":"top","label":"阻塞等待进程"},
		{"id":"12fd27c69da9c96a","fromNode":"895915c551265a0d","fromSide":"right","toNode":"c4be91260233b070","toSide":"left"},
		{"id":"e23cdd10829b3525","fromNode":"06ef056a4d84aa87","fromSide":"right","toNode":"ca04a94ce1f696a0","toSide":"left"},
		{"id":"3a83238a0a7366c1","fromNode":"06ef056a4d84aa87","fromSide":"right","toNode":"c21d7d64d334a8ac","toSide":"left"},
		{"id":"feb19a7f4983095e","fromNode":"c4be91260233b070","fromSide":"right","toNode":"06ef056a4d84aa87","toSide":"left"},
		{"id":"5afa892186b0ed24","fromNode":"c21d7d64d334a8ac","fromSide":"right","toNode":"9302438bb8ffd61a","toSide":"left"},
		{"id":"d46f20c8c7e8f8b9","fromNode":"88fabfbce52dbfb0","fromSide":"right","toNode":"8d2dec49a3322c3f","toSide":"left","label":"重入"},
		{"id":"1fa00e11b0522813","fromNode":"5b9f442b12040b89","fromSide":"right","toNode":"f688c49d0a2e6e19","toSide":"left"},
		{"id":"e4521310544517ff","fromNode":"5b9f442b12040b89","fromSide":"right","toNode":"88fabfbce52dbfb0","toSide":"left"},
		{"id":"f60e3c73a8ce6cc3","fromNode":"c4be91260233b070","fromSide":"right","toNode":"e9ea26acd6a1bf5c","toSide":"left"},
		{"id":"dca10ed06e8ec920","fromNode":"c4be91260233b070","fromSide":"right","toNode":"24d71a2bd3fc4328","toSide":"left"},
		{"id":"7a741953f8c6537c","fromNode":"895915c551265a0d","fromSide":"bottom","toNode":"39a4223eb055b8d5","toSide":"top"},
		{"id":"6a583802f3fa14c9","fromNode":"c4be91260233b070","fromSide":"bottom","toNode":"398fc099a83de41e","toSide":"top"},
		{"id":"3f87020829678b2d","fromNode":"78d2c82b1608bf14","fromSide":"right","toNode":"91483e6c73e0fb96","toSide":"left"},
		{"id":"f4e92d53f0469e85","fromNode":"78d2c82b1608bf14","fromSide":"right","toNode":"a97144c77c319cd4","toSide":"left"},
		{"id":"6912d01b4a013a56","fromNode":"78d2c82b1608bf14","fromSide":"right","toNode":"62b34ded30ad3fc1","toSide":"left"},
		{"id":"0f9fed12b694fd29","fromNode":"78d2c82b1608bf14","fromSide":"right","toNode":"1e23a2d2a5bb730a","toSide":"left"},
		{"id":"d1021adfdfad136a","fromNode":"3f1ecba1e83d2d82","fromSide":"right","toNode":"aa5f1a5dd5d244ff","toSide":"left"},
		{"id":"c461d2e7237656c6","fromNode":"3f1ecba1e83d2d82","fromSide":"right","toNode":"5d706d858ff407bc","toSide":"left"},
		{"id":"21b7a0f738cefbd9","fromNode":"91483e6c73e0fb96","fromSide":"right","toNode":"ca4f9a4110c5df8f","toSide":"left"},
		{"id":"567224cd239570eb","fromNode":"a97144c77c319cd4","fromSide":"right","toNode":"db731dad4e574d88","toSide":"left"},
		{"id":"d0e0ace30282cf18","fromNode":"62b34ded30ad3fc1","fromSide":"right","toNode":"e2f744d41e0e6c1e","toSide":"left"},
		{"id":"1efe9660c354632d","fromNode":"1e23a2d2a5bb730a","fromSide":"right","toNode":"d34049cf0c4efdd4","toSide":"left"},
		{"id":"d0d2aedc00f195d3","fromNode":"48b3c924439dee65","fromSide":"right","toNode":"50180542742aa17a","toSide":"left","label":"避免"},
		{"id":"e59fa7636abc699f","fromNode":"895915c551265a0d","fromSide":"top","toNode":"f8066799b796809a","toSide":"bottom"},
		{"id":"5096e78b1439a661","fromNode":"48b3c924439dee65","fromSide":"right","toNode":"8019efcace7c6ca3","toSide":"left","label":"检测"}
	]
}